import{_ as a,c as n,f as e,o as t}from"./app-CB8GcC1F.js";const l={};function o(c,s){return t(),n("div",null,s[0]||(s[0]=[e(`<br><h2 id="接口性能耗时排查" tabindex="-1"><a class="header-anchor" href="#接口性能耗时排查"><span>接口性能耗时排查</span></a></h2><h3 id="_1-使用arthas辅助排查" tabindex="-1"><a class="header-anchor" href="#_1-使用arthas辅助排查"><span>1. 使用Arthas辅助排查</span></a></h3><blockquote><p><code>Arthas</code>的<a href="https://arthas.aliyun.com/" target="_blank" rel="noopener noreferrer">官方文档</a>地址：https://arthas.aliyun.com/</p></blockquote><h4 id="_1-1-下载并启动arthas" tabindex="-1"><a class="header-anchor" href="#_1-1-下载并启动arthas"><span>1.1 下载并启动Arthas</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 下载到当前目录下</span></span>
<span class="line"><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://arthas.aliyun.com/arthas-boot.jar</span>
<span class="line"><span class="token comment"># 启动</span></span>
<span class="line"><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 等到出现 类似 [1]: 12345 /home/admin/example/demo.jar 这种的列表时，输入[]中的序号后按回车即可监听到目标 Java进程，见到如下命令行即可输入 arthas 的各种命令</span></span>
<span class="line"><span class="token punctuation">[</span>arthas@12345<span class="token punctuation">]</span>$ </span>
<span class="line"></span>
<span class="line"><span class="token comment"># 退出arthas,用完arthas后，输入 stop 后按回车 即可。否则 arthas会在后台继续运行。</span></span>
<span class="line"><span class="token punctuation">[</span>arthas@12345<span class="token punctuation">]</span>$ stop </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>curl</code>参数 <ul><li><code>-O</code>：（大写字母O）使用远程文件的原始名称保存文件。</li><li><code>-o</code>：（小写字母o）可以指定输出文件名，例如<code>curl -o output.txt http://example.com/file.txt</code>。</li></ul></li></ul><h4 id="_1-2-使用trace命令" tabindex="-1"><a class="header-anchor" href="#_1-2-使用trace命令"><span>1.2 使用<code>trace</code>命令</span></a></h4><blockquote><p>使用情况：<strong>明确知道某个方法很慢，但不清楚具体是方法内哪段代码慢。</strong></p></blockquote><ul><li>作用：输出方法内部的每个子方法的耗时。</li><li>注意：每次只能跟踪一级方法的调用链路。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 根据调用方法耗时过滤,超过200毫秒的打印出来，捕捉10次</span></span>
<span class="line">trace org.redisson.spring.data.connection.RedissonConnection get <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token string">&#39;#cost &gt; 200&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数解析 <ul><li><code>-n 10</code>：指定捕捉结果的次数，默认<code>100</code>次。</li><li><code>&#39;#cost &gt; 100&#39;</code>：捕捉<code>RedissonConnection类</code>的<code>get方法</code>耗时超过<code>200ms</code>的调用。</li></ul></li><li>结束<code>trace</code>命令 <ul><li>如果收集到足够次数会自动结束本次<code>trace</code>。</li><li>如果要手动结束，按下<code>Q</code>或者<code>Ctrl + C</code>也可以结束本次<code>trace</code>。</li><li>结束本次trace后，输入<code>reset后按回车</code>取消对类和方法的增强，否则影响性能。</li></ul></li></ul><blockquote><p>写笔记时已经没有想要的例子，给出如下结果做分析，体会其过程。</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token punctuation">[</span>arthas@1452252<span class="token punctuation">]</span>$ trace org.redisson.spring.data.connection.RedissonConnection get <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token string">&#39;#cost &gt; 2&#39;</span></span>
<span class="line">Press Q or Ctrl+C to abort.</span>
<span class="line">Affect<span class="token punctuation">(</span>class count: <span class="token number">1</span> , method count: <span class="token number">1</span><span class="token punctuation">)</span> cost <span class="token keyword">in</span> <span class="token number">524</span> ms, listenerId: <span class="token number">1</span></span>
<span class="line"><span class="token variable"><span class="token variable">\`</span>---ts<span class="token operator">=</span><span class="token number">2024</span>-12-28 <span class="token number">13</span>:11:30.609<span class="token punctuation">;</span><span class="token assign-left variable">thread_name</span><span class="token operator">=</span>http-nio-8090-exec-123<span class="token punctuation">;</span><span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">21741</span><span class="token punctuation">;</span><span class="token assign-left variable">is_daemon</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token assign-left variable">TCCL</span><span class="token operator">=</span>org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@503f91c3</span>
<span class="line">    <span class="token variable">\`</span></span>---<span class="token punctuation">[</span><span class="token number">4</span>.702433ms<span class="token punctuation">]</span> org.redisson.spring.data.connection.RedissonConnection:get<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        \`---<span class="token punctuation">[</span><span class="token number">81.17</span>% <span class="token number">3</span>.817142ms <span class="token punctuation">]</span> org.redisson.spring.data.connection.RedissonConnection:read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#484</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果分析 <ul><li>一般会把耗时最长的方法标红显示。</li><li>上例可以看到是 <code>RedissonConnection</code>的<code>get</code>方法耗时最长。</li><li>接着就是对耗时最长的方法<code>进行优化</code>或者<code>进一步排查</code>，进一步排查时可以继续使用<code>trace</code>命令找到其子方法的耗时。</li></ul></li></ul>`,15)]))}const p=a(l,[["render",o],["__file","接口耗时问题排查.html.vue"]]),r=JSON.parse('{"path":"/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/%E6%8E%A5%E5%8F%A3%E8%80%97%E6%97%B6%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5.html","title":"接口耗时问题排查","lang":"zh-CN","frontmatter":{"title":"接口耗时问题排查","date":"2024-12-28T12:41:01.000Z"},"headers":[{"level":2,"title":"接口性能耗时排查","slug":"接口性能耗时排查","link":"#接口性能耗时排查","children":[{"level":3,"title":"1. 使用Arthas辅助排查","slug":"_1-使用arthas辅助排查","link":"#_1-使用arthas辅助排查","children":[]}]}],"git":{"updatedTime":1735376738000},"filePathRelative":"工作中遇到的问题及排查方法/接口耗时问题排查.md"}');export{p as comp,r as data};
